generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id         String            @id @default(uuid())
  email      String            @unique
  password   String
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @default(now()) @map("updated_at")
  name       String
  age        Int?
  profileImage     String?       @map("profile_image")
  avatarUrl    String?           @map("avatar_url")
  week       Int?
  doctorId   String?
  activities PatientActivity[]
  questionResponses  QuestionResponse[]
  questionnaires     Questionnaire[]
  patientBadges PatientBadge[]
  habitBadges   HabitBadge[]
}

model Doctor {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

enum HabitType {
  WATER
  SLEEP
  FOOD
  STEPS
}


enum BadgeType {
  HYDRATED_QUEEN
  SNAPSHOT
  HEART_SCRIBE
  RESTED_DIVA
  EXPLORER
  MAMA_MILESTONE_I
  MAMA_MILESTONE_II
  MAMA_MILESTONE_III
  MAMA_MILESTONE_IV
  MAMA_MILESTONE_V
  MAMA_MILESTONE_VI
  WATER_WIZARD
  SLEEP_WIZARD
  HEALTH_QUEEN
  ON_THE_MOVE
  HOT_MAMA
}

model Badge {
  id          String      @id @default(uuid())
  type        BadgeType   @unique
  title       String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  awarded     PatientBadge[]
}

model PatientBadge {
  id        String   @id @default(uuid())
  patientId String
  badgeId   String
  awardedAt DateTime @default(now())

  patient   Patient @relation(fields: [patientId], references: [id])
  badge     Badge   @relation(fields: [badgeId], references: [id])

  @@unique([patientId, badgeId])
}

model HabitBadge {
  id         String     @id @default(uuid())
  patientId  String
  habit      HabitType
  badgeType  BadgeType
  awardedAt  DateTime   @default(now())

  patient    Patient    @relation(fields: [patientId], references: [id])

  @@unique([patientId, badgeType])
}



model PatientActivity {
  id          String       @id @default(uuid())
  patientId   String       @map("user_id")
  date        DateTime
  weight      Float?
  weight_unit String?
  water       Int?
  steps       Int?
  sleepStart  DateTime?
  sleepEnd    DateTime?
  heart_rate  Float?
  notetaking  String?
  wombPicture String?
  waterGoal   Int?
  stepsGoal   Int?
  meal        Meals[]
  medications Medication[]
  wombPictures WombPicture[] // New relation
  patient     Patient      @relation(fields: [patientId], references: [id])
}

model WombPicture {
  id                String          @id @default(uuid())
  patientActivityId String
  title             String
  imageUrl          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  patientActivity   PatientActivity @relation(fields: [patientActivityId], references: [id])
}


model Meals {
  mealId            String          @id @default(uuid())
  name              String
  patientActivityId String          @map("user_activity_id")
  patientActivity   PatientActivity @relation(fields: [patientActivityId], references: [id])

  @@unique([patientActivityId, mealId])
}

model MedicalDocs {
  id    String @id @default(uuid())
  files String
}

model Medication {
  id                String          @id @default(uuid())
  patientActivityId String
  medicationName    String
  startDate         DateTime
  endDate           DateTime?
  days              String[]
  times             DateTime[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  completed         Boolean         @default(false)
  completedDates    String[]        @default([])
  patientActivity   PatientActivity @relation(fields: [patientActivityId], references: [id])
}


enum ContentType {
  EXERCISES
  AUDIOS
  STORIES
}

enum IconType {
  heart
  landscape
  none
  moon
  cloud
  sun
  feather
}

model SelfCareCategory {
  id             String      @id @default(uuid())
  title          String
  iconType       IconType
  count          Int
  contentType    ContentType
  gradientStart  String
  gradientMiddle String?
  gradientEnd    String
  exercises      Exercise[]
  audioTracks    Audio[]
  stories        Story[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Exercise {
  id                String           @id @default(uuid())
  type              String
  title             String
  duration          String
  image             String
  isLocked          Boolean          @default(false)
  categoryId        String
  isFavorite        Boolean          @default(false)
  content           String?          @db.Text
  category          SelfCareCategory @relation(fields: [categoryId], references: [id])
  // favoriteOfUsers   Patient[]        @relation("PatientFavorites")
  // recentlyUsedByUsers Patient[]      @relation("PatientRecentlyUsed")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Audio {
  id         String           @id @default(uuid())
  title      String
  url        String
  duration   String?
  image      String?
  categoryId String
  category   SelfCareCategory @relation(fields: [categoryId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Story {
  id         String           @id @default(uuid())
  title      String
  content    String           @db.Text
  image      String?
  duration   String?
  categoryId String
  category   SelfCareCategory @relation(fields: [categoryId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

// Questionnaire Models

model QuestionnaireDomain {
  id           String      @id @default(uuid())
  name         String      // e.g., "domain-1", "domain-2" - external identifier
  title        String      // e.g., "DOMAIN I", "DOMAIN II"
  description  String      // e.g., "Housing & Environment"
  order        Int         // To maintain the correct ordering of domains
  questions    Question[]
}

model Question {
  id               String              @id @default(uuid())
  questionId       String              // e.g., "q1-1", "q2-3" - external identifier
  text             String              // The actual question text
  possibleFlag     String?             // e.g., "Housing instability / temporary housing"
  domainId         String              // Foreign key to domain
  domain           QuestionnaireDomain @relation(fields: [domainId], references: [id])
  order            Int                 // To maintain the correct order of questions
  responses        QuestionResponse[]
}

model QuestionResponse {
  id              String         @id @default(uuid())
  patientId       String
  patient         Patient        @relation(fields: [patientId], references: [id])
  questionId      String
  question        Question       @relation(fields: [questionId], references: [id])
  domainId        String         // Stored for easier querying
  response        String         // Patient's answer text
  flag            String?        // The flag that was raised, if any
  timestamp       DateTime       @default(now())
  questionnaireId String?
  questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
}

model Questionnaire {
  id             String             @id @default(uuid())
  patientId      String
  patient        Patient            @relation(fields: [patientId], references: [id])
  startedAt      DateTime           @default(now())
  completedAt    DateTime?
  isActive       Boolean            @default(true)
  isPaused       Boolean            @default(false)
  isCompleted    Boolean            @default(false)
  responses      QuestionResponse[]
}