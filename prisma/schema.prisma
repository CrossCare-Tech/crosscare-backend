generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                      String            @id @default(uuid())
  email                   String            @unique
  password                String
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @default(now()) @map("updated_at")
  name                    String
  age                     Int?
  profileImage            String?       @map("profile_image")
  avatarUrl               String?           @map("avatar_url")
  week                    Int?
  day                     Int?
  doctorId                String?
  
  // Add default goal fields
  waterGoal               Int?              @default(10)  // Default 2500ml (10 glasses)
  calorieGoal             Int?              @default(2000)  // Default 2000 calories
  stepsGoal               Int?              @default(5000)  // Default 5000 steps
  
  // Email verification fields
  isEmailVerified         Boolean           @default(false)
  emailVerificationToken  String?
  emailTokenExpires       DateTime?
  
  activities              PatientActivity[]
  questionResponses       QuestionResponse[]
  questionnaires          Questionnaire[]
  patientBadges           PatientBadge[] @relation("PatientToBadge")
  habitBadges             HabitBadge[]
  savedMealTemplates      SavedMealTemplate[]
  appointments            Appointment[]
  resetToken              String?
  resetTokenExpires       DateTime?
}

model Doctor {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

enum HabitType {
  WATER
  SLEEP
  FOOD
  STEPS
}


enum BadgeType {
  HYDRATED_QUEEN
  SNAPSHOT
  HEART_SCRIBE
  RESTED_DIVA
  EXPLORER
  MAMA_MILESTONE_I
  MAMA_MILESTONE_II
  MAMA_MILESTONE_III
  MAMA_MILESTONE_IV
  MAMA_MILESTONE_V
  MAMA_MILESTONE_VI
  TRIVIA_QUEEN
  GETTING_TO_KNOW_YOU
  WATER_WIZARD
  WATER_WIZARD_I
  WATER_WIZARD_II
  WATER_WIZARD_III
  WATER_WIZARD_IV
  WATER_WIZARD_V
  WATER_WIZARD_VI
  WATER_WIZARD_VII
  WATER_WIZARD_VIII
  WATER_WIZARD_IX
  SLEEP_WIZARD
  SLEEP_WIZARD_I
  SLEEP_WIZARD_II
  SLEEP_WIZARD_III
  SLEEP_WIZARD_IV
  SLEEP_WIZARD_V
  SLEEP_WIZARD_VI
  SLEEP_WIZARD_VII
  SLEEP_WIZARD_VIII
  SLEEP_WIZARD_IX
  HEALTH_QUEEN
  HEALTH_QUEEN_I
  HEALTH_QUEEN_II
  HEALTH_QUEEN_III
  HEALTH_QUEEN_IV
  HEALTH_QUEEN_V
  HEALTH_QUEEN_VI
  HEALTH_QUEEN_VII
  HEALTH_QUEEN_VIII
  HEALTH_QUEEN_IX
  ON_THE_MOVE
  ON_THE_MOVE_I
  ON_THE_MOVE_II
  ON_THE_MOVE_III
  ON_THE_MOVE_IV
  ON_THE_MOVE_V
  ON_THE_MOVE_VI
  ON_THE_MOVE_VII
  ON_THE_MOVE_VIII
  ON_THE_MOVE_IX
  HOT_MAMA
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum FoodClassification {
  GOOD
  BAD
}

model Badge {
  id          String      @id @default(uuid())
  type        BadgeType   @unique
  title       String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  awarded     PatientBadge[]
}

model PatientBadge {
  id        String   @id @default(uuid())
  patientId String
  badgeId   String
  awardedAt DateTime @default(now())

  patient   Patient  @relation("PatientToBadge", fields: [patientId], references: [id], onDelete: Cascade)
  badge     Badge   @relation(fields: [badgeId], references: [id])

  @@unique([patientId, badgeId])
}

model HabitBadge {
  id         String     @id @default(uuid())
  patientId  String
  habit      HabitType
  badgeType  BadgeType
  awardedAt  DateTime   @default(now())

  patient    Patient    @relation(fields: [patientId], references: [id])

  @@unique([patientId, badgeType])
}



model PatientActivity {
  id          String       @id @default(uuid())
  patientId   String       @map("user_id")
  date        DateTime
  weight      Float?
  weight_unit String?
  water       Int?
  steps       Int?
  sleepStart  DateTime?
  sleepEnd    DateTime?
  heart_rate  Float?
  notetaking  String?
  wombPicture String?

  calorieGoal     Int?             // Daily calorie goal
  caloriesConsumed Int?            // Total calories consumed
  goodFoodCount   Int?             // Count of good foods
  badFoodCount    Int?         

  waterGoal   Int?
  stepsGoal   Int?
  meal        Meals[]
  medications Medication[]
  noteTaking  NoteTaking[]
  wombPictures WombPicture[] // New relation
  patient     Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model WombPicture {
  id                String          @id @default(uuid())
  patientActivityId String
  title             String
  imageUrl          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  patientActivity   PatientActivity @relation(fields: [patientActivityId], references: [id])
}

model NoteTaking{
  id                String          @id @default(uuid())
  patientActivityId String
  title             String
  description       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  patientActivity   PatientActivity @relation(fields: [patientActivityId], references: [id])
}

model Meals {
  id                String          @id @default(uuid())
  patientActivityId String
  mealType          MealType
  totalCalories     Int             
  foodItemsCount    Int            
  isSavedAsMeal     Boolean         
  savedMealName     String?         // Custom name when saved
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  patientActivity   PatientActivity @relation(fields: [patientActivityId], references: [id], onDelete: Cascade)
  foodItems         FoodItem[]
  
  @@unique([patientActivityId, mealType]) // One meal per type per day
  @@map("meal")
}

model FoodItem {
  id              String              @id @default(uuid())
  dailyMealId     String
  name            String              // e.g., "Coffee", "Tea", "Apple"
  portion         String              // e.g., "1 Tea cup", "1 Small (2-3/4" dia)"
  quantity        Int                 @default(1) // Number of portions
  calories        Int                  // e.g., 133 (calories per single portion)
  classification  FoodClassification  // GOOD or BAD only
  
  // Additional nutrition info (optional)
  protein         Float?              // in grams
  carbohydrates   Float?              // in grams
  fat             Float?              // in grams
  
  // Metadata
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  Meals       Meals           @relation(fields: [dailyMealId], references: [id], onDelete: Cascade)
  
  @@map("food_items")
}

model SavedMealTemplate {
  id          String              @id @default(uuid())
  patientId   String
  name        String             
  mealType    MealType
  description String?
  totalCalories Int              
  isPublic    Boolean            
  usageCount  Int                     // How many times used
  
  // Template food items
  templateItems SavedMealItem[]
  
  // Metadata
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  patient     Patient             @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  @@map("saved_meal_templates")
}

// Food items in saved meal templates
model SavedMealItem {
  id              String              @id @default(uuid())
  savedMealId     String
  name            String
  portion         String
  calories        Int                 
  classification  FoodClassification 
  
  // Relations
  savedMeal       SavedMealTemplate   @relation(fields: [savedMealId], references: [id], onDelete: Cascade)
  
  @@map("saved_meal_items")
}

// Food database for quick selection and calorie lookup
model FoodDatabase {
  id              String              @id @default(uuid())
  name            String              @unique
  commonPortions  Json                // Array of common portions: [{"portion": "1 cup", "calories": 133}, {"portion": "1 tea cup", "calories": 100}]
  classification  FoodClassification  
  
  // Base nutrition per 100g for calculations
  caloriesPer100g Int
  protein         Float?
  carbohydrates   Float?
  fat             Float?
  
  // Metadata
  isVerified      Boolean             
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@map("food_database")
}

model MedicalDocs {
  id    String @id @default(uuid())
  files String
}

model Medication {
  id                String          @id @default(uuid())
  patientActivityId String
  medicationName    String
  startDate         DateTime
  endDate           DateTime?
  days              String[]
  times             DateTime[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  completed         Boolean         @default(false)
  completedDates    String[]        @default([])
  patientActivity   PatientActivity @relation(fields: [patientActivityId], references: [id])
}


enum ContentType {
  EXERCISES
  AUDIOS
  STORIES
}

enum IconType {
  heart
  landscape
  none
  moon
  cloud
  sun
  feather
}

model SelfCareCategory {
  id             String      @id @default(uuid())
  title          String
  iconType       IconType
  count          Int
  contentType    ContentType
  gradientStart  String
  gradientMiddle String?
  gradientEnd    String
  exercises      Exercise[]
  audioTracks    Audio[]
  stories        Story[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Exercise {
  id                String           @id @default(uuid())
  type              String
  title             String
  duration          String
  image             String
  isLocked          Boolean          @default(false)
  categoryId        String
  isFavorite        Boolean          @default(false)
  content           String?          @db.Text
  category          SelfCareCategory @relation(fields: [categoryId], references: [id])
  // favoriteOfUsers   Patient[]        @relation("PatientFavorites")
  // recentlyUsedByUsers Patient[]      @relation("PatientRecentlyUsed")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Audio {
  id         String           @id @default(uuid())
  title      String
  url        String
  duration   String?
  image      String?
  categoryId String
  category   SelfCareCategory @relation(fields: [categoryId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Story {
  id         String           @id @default(uuid())
  title      String
  content    String           @db.Text
  image      String?
  duration   String?
  categoryId String
  category   SelfCareCategory @relation(fields: [categoryId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

// Questionnaire Models

model QuestionnaireDomain {
  id           String      @id @default(uuid())
  name         String      // e.g., "domain-1", "domain-2" - external identifier
  title        String      // e.g., "DOMAIN I", "DOMAIN II"
  description  String      // e.g., "Housing & Environment"
  order        Int         // To maintain the correct ordering of domains
  questions    Question[]
}

model Question {
  id               String              @id @default(uuid())
  questionId       String              // e.g., "q1-1", "q2-3" - external identifier
  text             String              // The actual question text
  possibleFlag     String?             // e.g., "Housing instability / temporary housing"
  domainId         String              // Foreign key to domain
  domain           QuestionnaireDomain @relation(fields: [domainId], references: [id])
  order            Int                 // To maintain the correct order of questions
  responses        QuestionResponse[]
}

model QuestionResponse {
  id              String         @id @default(uuid())
  patientId       String
  patient         Patient        @relation(fields: [patientId], references: [id])
  questionId      String
  question        Question       @relation(fields: [questionId], references: [id])
  domainId        String         // Stored for easier querying
  response        String         // Patient's answer text
  flag            String?        // The flag that was raised, if any
  timestamp       DateTime       @default(now())
  questionnaireId String?
  questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
}

model Questionnaire {
  id             String             @id @default(uuid())
  patientId      String
  patient        Patient            @relation(fields: [patientId], references: [id])
  startedAt      DateTime           @default(now())
  completedAt    DateTime?
  isActive       Boolean            @default(true)
  isPaused       Boolean            @default(false)
  isCompleted    Boolean            @default(false)
  responses      QuestionResponse[]
}

model Appointment {
  id          String      @id @default(uuid())
  patientId   String
  title       String      // This will store the description
  appointmentDate DateTime // This will store the combined date and time
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  patient     Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
}